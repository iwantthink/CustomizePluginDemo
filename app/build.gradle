import com.android.build.gradle.AppExtension

apply plugin: 'com.android.application'
apply plugin: 'com.hypers.APMPlugin'
//apply plugin: 'com.hypers.Greetplugin'


buildscript {
    repositories {
        jcenter()
        maven {
            url uri('../repo') //插件所在的目录
        }
    }

    dependencies {
        classpath 'com.hypers:APMPlugin:7'
        classpath fileTree(dir:'libs',include:'*.jar')
//        classpath 'com.hypers:GreetingPlugin:29' //添加依赖
    }

}


repositories {
    maven {
        url uri('../repo')
    }

}

//RYAN {
//    excludeClass = ["Test.class"]
//    includePkg = ["com.hmt.analytics.customizeplugin"]
//    oldDir = "$project.buildDir/outputs/ryan"
//}

//books {
//    quickStart {
//
//    }
//
//    developerGuide {
//    }
//
//}

//clickcc {
//    message = 'what the fuck'
//    person {
//        name = 'ryan'
//    }
//}

//PluginCfg {
//    func  {
//        println 'hello: gradle plugin'
//    }
//    address 'shanghai'
//}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    sourceSets {
        main {
            jniLibs.srcDirs 'src/main/jniLibs'
        }
    }

    defaultConfig {
        applicationId "com.hmt.analytics.customizeplugin"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
        }
    }

//    productFlavors {
//        apple {
//            versionNameSuffix '.apple'
//        }
//        orange {
//            versionNameSuffix '.orange'
//        }
//    }

    dexOptions {
        jumboMode true
        javaMaxHeapSize "4g"
    }

}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
}

task getReleasePsw << {
    def psw = ''
    println 'getReleasePsw is running'
    if (rootProject.file('local.properties').exists()) {
        java.util.Properties properties = new Properties();
        properties.load(rootProject.file('local.properties').newDataInputStream())
        psw = properties.getProperty('release.psw')
    } else if (psw.trim().isEmpty()) {
        //TODO
        psw = java.lang.System.in.each {
        }
    }
}

tasks.getByName("assemble") {
    it.doLast {
        println "i am running after assemble"
    }
}

project.afterEvaluate {
//    project.android.applicationVariants.findAll { variant ->
//        def proguardTask = project.tasks.findByName("transformClassesAndResourcesWithProguardFor${variant.name.capitalize()}")
//        if (proguardTask) {
//            project.logger.error "proguard=>${variant.name.capitalize()}"
//
//            proguardTask.inputs.files.files.each { File file ->
//                project.logger.error "file inputs=>${file.absolutePath}"
//            }
//
//            proguardTask.outputs.files.files.each { File file ->
//                project.logger.error "file outputs=>${file.absolutePath}"
//            }
//        }
//
//        def dexTask = project.tasks.findByName("transformClassesWithDexFor${variant.name.capitalize()}")
//        if (dexTask) {
//            project.logger.error "dex=>${variant.name.capitalize()}"
//
//            dexTask.inputs.files.files.each { File file ->
//                project.logger.error "file inputs=>${file.absolutePath}"
//            }
//
//            dexTask.outputs.files.files.each { File file ->
//                project.logger.error "file outputs=>${file.absolutePath}"
//            }
//        }
//    }
    def app = project.extensions.getByName('android') as AppExtension
    java.lang.System.err.println("app.compileSdkVersion = $app.compileSdkVersion")
    project.extensions.getByType(AppExtension).applicationVariants.findAll {
        System.err.println("application variants = $it.name")
    }
    project.logger.error "hello".capitalize()
    project.logger.error '-----------------------------------------------'

//    project.android.applicationVariants.findAll { variant ->
//        def testTask = project.tasks.findByName("transformClassesWithMyTransformFor${variant.name.capitalize()}")
//        def proguardTask = project.tasks.findByName("transformClassesAndResourcesWithProguardFor${variant.name.capitalize()}")
//
//
//        if (testTask) {
//            Set<File> testTaskInputFiles = testTask.inputs.files.files
//            Set<File> testTaskOutputFiles = testTask.inputs.files.files
//
//            project.logger.error "Name:transformClassesWithMyTransfor=====>${testTask.name} input"
//            testTaskInputFiles.each { inputFile ->
//                def path = inputFile.absolutePath
//                project.logger.error "inputFilePath = $path"
//            }
//
//            project.logger.error "Name:transformClassesWithMyTransform=====>${testTask.name} output"
//            testTaskOutputFiles.each { outputFile ->
//                def path = outputFile.absolutePath
//                project.logger.error "outputFilePath = $path"
//            }
//        }
//
//        if (proguardTask) {
//            Set<File> testTaskInputFiles = proguardTask.inputs.files.files
//            Set<File> testTaskOutputFiles = proguardTask.inputs.files.files
//
//            project.logger.error "Name:transformClassesAndResourcesWithProguardFor=====>${proguardTask.name} input"
//            testTaskInputFiles.each { inputFile ->
//                def path = inputFile.absolutePath
//                project.logger.error "inputFilePath = $path"
//            }
//
//            project.logger.error "Name:transformClassesAndResourcesWithProguardFor=====>${proguardTask.name} output"
//            testTaskOutputFiles.each { outputFile ->
//                def path = outputFile.absolutePath
//                project.logger.error "outputFilePath = $path"
//            }
//        }
//
//
//    }

}
